networks:
  my_network:

services:
  ubuntu-poco:
    image: ubuntu-poco
    container_name: ubuntu-poco
    build: 
      context: .
      dockerfile: Dockerfile_poco
    command: /bin/true
    networks:
      - my_network

  ubuntu-poco-git:
    image: ubuntu-poco-git
    container_name: ubuntu-poco-git
    build: 
      context: .
      dockerfile: Dockerfile_poco_git
    command: /bin/true
    networks:
      - my_network

  mariadb-1:
    image: mariadb_server
    build:
      context: ./mariadb
      dockerfile: Dockerfile
    container_name: db_server_1
    restart: always
    ports:
      - "9010:3306"
    networks:
      - my_network
    environment:
      MYSQL_DATABASE: db
      MYSQL_USER: user
      MYSQL_PASSWORD: password
      MYSQL_ROOT_PASSWORD: root
    healthcheck:
      test: "/usr/bin/mariadb --user=user --password=password --execute \"SHOW DATABASES;\""
      interval: 5s
      timeout: 5s
      retries: 20

  mariadb-2:
    image: mariadb_server
    build:
      context: ./mariadb
      dockerfile: Dockerfile
    container_name: db_server_2
    restart: always
    ports:
      - "9011:3306"
    networks:
      - my_network
    environment:
      MYSQL_DATABASE: db
      MYSQL_USER: user
      MYSQL_PASSWORD: password
      MYSQL_ROOT_PASSWORD: root
    healthcheck:
      test: "/usr/bin/mariadb --user=user --password=password --execute \"SHOW DATABASES;\""
      interval: 5s
      timeout: 5s
      retries: 20

  mariadb-3:
    image: mariadb_server
    build:
      context: ./mariadb
      dockerfile: Dockerfile
    container_name: db_server_3
    restart: always
    ports:
      - "9012:3306"
    networks:
      - my_network
    environment:
      MYSQL_DATABASE: db
      MYSQL_USER: user
      MYSQL_PASSWORD: password
      MYSQL_ROOT_PASSWORD: root
    healthcheck:
      test: "/usr/bin/mariadb --user=user --password=password --execute \"SHOW DATABASES;\""
      interval: 5s
      timeout: 5s
      retries: 20

  proxysql:
    image: proxysql
    build:
      context: ./proxysql
      dockerfile: Dockerfile
    container_name: proxysql
#    command: >
#      --initial
#    volumes:
#      - proxysql-data:/var/lib/proxysql
    healthcheck:
      test: "/usr/bin/mysql -h proxysql -P 6033 -u user -ppassword --execute \"SHOW DATABASES;\""
      interval: 5s
      timeout: 5s
      retries: 20
    networks:
      - my_network
    ports:
      # Mysql Client Port
      - "9020:6033"
      # Mysql Admin Port
      - "9021:6032"
    depends_on:
      - mariadb-1
      - mariadb-2
      - mariadb-3

  cache:
    image: redis:6.2-alpine
    container_name: cache
    restart: always
    ports:
      - '9100:6379'
    command: redis-server --save 20 1 --loglevel warning 
    networks:
      - my_network


  kafka1:
    image: 'bitnami/kafka:latest'
    container_name: kafka1
    ports:
      - "9181:2181"
      - "9192:9092"
    environment:
      KAFKA_ENABLE_KRAFT: "yes"
      KAFKA_CFG_PROCESS_ROLES: "broker,controller"
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_CFG_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093"
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT"
      KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://kafka1:9092"
      KAFKA_BROKER_ID: 1
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "1@kafka1:9093"
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_KRAFT_CLUSTER_ID: "dh6khitPSDGZSBOjNeTC_g"
      KAFKA_CFG_NODE_ID: 1
    networks:
      - my_network

  kafka-ui:
    image: provectuslabs/kafka-ui:v0.4.0
    container_name: kafka_ui
    ports:
      - "9081:8080"
    environment:
      KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS: "kafka1:9092"
      KAFKA_CLUSTERS_0_NAME: "kraft"
    depends_on:
      kafka1:
        condition: service_started
    networks:
      - my_network


  python_loader:
    image: py
    build:
      context: ./test 
      dockerfile: Dockerfile
    container_name: python_loader
    command: "populate_db.py"
    networks:
      - my_network
    restart: "no"
    depends_on:
      proxysql:
        condition: service_healthy
      cache:
        condition: service_started

  writer:
    image: writer
    container_name: writer_service
    restart: always
    build:
      context: ./writer
      dockerfile: Dockerfile
    environment:      
      DB_HOST: proxysql
      DB_PORT: 6033
      DB_LOGIN: user
      DB_PASSWORD: password
      DB_DATABASE: db
      QUEUE_HOST: kafka1:9092
      QUEUE_TOPIC: event_server
      QUEUE_GROUP_ID: 0
    depends_on: 
      python_loader:
        condition: service_completed_successfully
    ports:
      - "9000:8080"
    networks:
      - my_network


  chat:
    image: chat
    container_name: chat_service
    restart: always
    build:
      context: ./chat
      dockerfile: Dockerfile
    environment:
      DB_HOST: proxysql
      DB_PORT: 6033
      DB_LOGIN: user
      DB_PASSWORD: password
      DB_DATABASE: db
    depends_on: 
      python_loader:
        condition: service_completed_successfully
      writer:
        condition: service_started
    ports:
      - "9001:8080"
    networks:
      - my_network
    links:
      - proxysql:database_server

  wall:
    image: wall
    container_name: wall_service
    restart: always
    build:
      context: ./wall
      dockerfile: Dockerfile
    environment:
      DB_HOST: proxysql
      DB_PORT: 6033
      DB_LOGIN: user
      DB_PASSWORD: password
      DB_DATABASE: db
    depends_on: 
      python_loader:
        condition: service_completed_successfully
      writer:
        condition: service_started        
    networks:
      - my_network
    ports:
      - "9002:8080"
    links:
      - proxysql:database_server

  user:
    image: user
    container_name: user_service
    restart: always
    build:
      context: ./user
      dockerfile: Dockerfile
    environment:
      DB_HOST: proxysql
      DB_PORT: 6033
      DB_LOGIN: user
      DB_PASSWORD: password
      DB_DATABASE: db
      CACHE: cache:6379
      QUEUE_HOST: kafka1:9092
      QUEUE_TOPIC: event_server
      QUEUE_GROUP_ID: 0
    depends_on: 
      python_loader:
        condition: service_completed_successfully
      writer:
        condition: service_started        
    networks:
      - my_network
    ports:
      - "9003:8080"
    links:
      - proxysql:database_server

  test:
    image: py
    build:
      context: ./test 
      dockerfile: Dockerfile
    container_name: python_test
    command: "test.py"
    networks:
      - my_network
    restart: "no"
    depends_on:
      - user
      - wall 
      - chat
        